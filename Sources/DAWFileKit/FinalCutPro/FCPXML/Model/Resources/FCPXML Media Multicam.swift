//
//  FCPXML Media Multicam.swift
//  DAWFileKit • https://github.com/orchetect/DAWFileKit
//  © 2022 Steffan Andrews • Licensed under MIT License
//

#if os(macOS) // XMLNode only works on macOS

import Foundation
import TimecodeKit

extension FinalCutPro.FCPXML.Media {
    /// A multi-camera element contains one or more `mc-angle` elements that each manage a series of
    /// other story elements.
    public struct Multicam: Equatable, Hashable {
        /// Multicam format.
        public var format: String?
        
        /// Multicam local timeline start.
        public var tcStart: Timecode?
        
        /// Containers of story elements organized sequentially in time.
        public var angles: [Angle]
        
        public init(
            format: String? = nil,
            tcStart: Timecode? = nil,
            angles: [Angle] = []
        ) {
            self.format = format
            self.tcStart = tcStart
            self.angles = angles
        }
    }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    public enum Attributes: String, XMLParsableAttributesKey {
        case format
        case tcStart
        case tcFormat
    }
    
    public enum Children: String {
        case mcAngle = "mc-angle"
    }
    
    public init?(
        from xmlLeaf: XMLElement,
        breadcrumbs: [XMLElement],
        resources: [String: FinalCutPro.FCPXML.AnyResource],
        contextBuilder: FCPXMLElementContextBuilder
    ) {
        let rawValues = xmlLeaf.parseRawAttributeValues(key: Attributes.self)
        
        // validate element name
        guard xmlLeaf.name == FinalCutPro.FCPXML.Media.Children.multicam.rawValue
        else { return nil }
        
        format = rawValues[.format]
        
        let tcFormat: FinalCutPro.FCPXML.TimecodeFormat
        if let tcFormatValue = rawValues[.tcFormat],
            let tcFmt = FinalCutPro.FCPXML.TimecodeFormat(rawValue: tcFormatValue)
        {
            tcFormat = tcFmt
        } else {
            tcFormat = .nonDropFrame
        }
        
        if let format = format,
           let tcStartValue = rawValues[.tcStart]
        {
            tcStart = try? FinalCutPro.FCPXML.timecode(
                fromRational: tcStartValue,
                tcFormat: tcFormat,
                resourceID: format,
                resources: resources
            )
        }
        
        // angles
        angles = Self.parseAngles( // adds xmlLeaf as breadcrumb
            in: xmlLeaf,
            breadcrumbs: breadcrumbs,
            resources: resources,
            contextBuilder: contextBuilder
        )
    }
}

extension FinalCutPro.FCPXML.Media.Multicam: FCPXMLExtractable {
    public func extractableElements() -> [FinalCutPro.FCPXML.AnyElement] {
        []
    }
    
    public func extractableChildren() -> [FinalCutPro.FCPXML.AnyElement] {
        // `Multicam.Angle` doesn't conform to FCPXMLElement and can't be wrapped with AnyElement
        angles.flatMap { $0.contents.asAnyElements() }
    }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    /// Returns the corresponding angles for the given multicam source(s).
    public func audioVideoAngles(
        for sources: [FinalCutPro.FCPXML.MCClip.MulticamSource]
    ) -> (audio: Angle?, video: Angle?) {
        angles.audioVideoAngles(for: sources)
    }
    
    /// Returns the corresponding angle IDs for the given multicam source(s).
    public func audioVideoAngleIDs(
        for sources: [FinalCutPro.FCPXML.MCClip.MulticamSource]
    ) -> (audioID: String?, videoID: String?) {
        sources.audioVideoAngleIDs()
    }
    
    /// Returns the angle with the specified angle ID.
    public func angle(withID angleID: String?) -> Angle? {
        angles.angle(withID: angleID)
    }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    /// A container of story elements organized sequentially in time.
    /// Similar to a `sequence`.
    public struct Angle: Equatable, Hashable {
        /// Angle name.
        public var name: String?
        
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        public var angleID: String?
        
        // can't store model story elements because they require resources to already have
        // been parsed to construct. so as a workaround we'll store raw XML here so we can
        // parse it later after the complete collection of resources have been parsed.
        /// Story elements contained in the angle.
        public var contents: [FinalCutPro.FCPXML.AnyStoryElement]
        
        public init(
            name: String? = nil,
            angleID: String? = nil,
            contents: [FinalCutPro.FCPXML.AnyStoryElement] = []
        ) {
            self.name = name
            self.angleID = angleID
            self.contents = contents
        }
    }
    
    static func parseAngles(
        in xmlLeaf: XMLElement,
        breadcrumbs: [XMLElement],
        resources: [String: FinalCutPro.FCPXML.AnyResource],
        contextBuilder: FCPXMLElementContextBuilder
    ) -> [Angle] {
        let angleChildren = FinalCutPro.FCPXML.mcAnglesXML(in: xmlLeaf)
        
        let angles = angleChildren.compactMap {
            Angle(
                from: $0,
                breadcrumbs: breadcrumbs + [xmlLeaf],
                resources: resources,
                contextBuilder: contextBuilder
            )
        }
        return angles
    }
}

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    public enum Attributes: String, XMLParsableAttributesKey {
        case name
        case angleID
    }
    
    public init?(
        from xmlLeaf: XMLElement,
        breadcrumbs: [XMLElement],
        resources: [String: FinalCutPro.FCPXML.AnyResource],
        contextBuilder: FCPXMLElementContextBuilder
    ) {
        let rawValues = xmlLeaf.parseRawAttributeValues(key: Attributes.self)
        
        // validate element name
        guard xmlLeaf.name == FinalCutPro.FCPXML.Media.Multicam.Children.mcAngle.rawValue
        else { return nil }
        
        name = rawValues[.name]
        angleID = rawValues[.angleID]
        
        contents = FinalCutPro.FCPXML.storyElements( // adds xmlLeaf as breadcrumb
            in: xmlLeaf,
            breadcrumbs: breadcrumbs,
            resources: resources,
            contextBuilder: contextBuilder
        )
    }
}

extension [FinalCutPro.FCPXML.Media.Multicam.Angle] {
    /// Returns the angle with the specified angle ID.
    public func angle(withID angleID: String?) -> Element? {
        guard let angleID = angleID else { return nil }
        return first(where: { $0.angleID == angleID })
    }
    
    /// Returns the corresponding angles for the given multicam source(s).
    public func audioVideoAngles(
        for sources: [FinalCutPro.FCPXML.MCClip.MulticamSource]
    ) -> (audio: Element?, video: Element?) {
        let (audioAngleID, videoAngleID) = sources.audioVideoAngleIDs()
        
        let audioAngle = angle(withID: audioAngleID)
        let videoAngle = angle(withID: videoAngleID)
        
        return (audio: audioAngle, video: videoAngle)
    }
}

extension FinalCutPro.FCPXML {
    static func mcAnglesXML(in xmlLeaf: XMLElement) -> [XMLElement] {
        xmlLeaf.children?
            .filter {
                $0.name == FinalCutPro.FCPXML.Media.Multicam.Children.mcAngle.rawValue
            }
            .compactMap { $0 as? XMLElement }
        ?? []
    }
}

#endif
