//
//  FCPXML Media Multicam.swift
//  DAWFileKit • https://github.com/orchetect/DAWFileKit
//  © 2022 Steffan Andrews • Licensed under MIT License
//

#if os(macOS) // XMLNode only works on macOS

import Foundation

extension FinalCutPro.FCPXML.Media {
    /// A multi-camera element contains one or more `mc-angle` elements that each manage a series of
    /// other story elements.
    public enum Multicam { }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    public enum Attributes: String, XMLParsableAttributesKey {
        /// Multicam format.
        case format
        
        /// Multicam local timeline start.
        case tcStart
        
        /// Multicam local timeline timecode format.
        case tcFormat
    }
    
    public enum Children: String {
        case mcAngle = "mc-angle"
    }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    /// Returns the corresponding angle IDs for the given multicam source(s).
    public func audioVideoAngleIDs(
        forMulticamSources sources: [XMLElement]
    ) -> (audioID: String?, videoID: String?) {
        sources.audioVideoAngleIDs()
    }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    /// A container of story elements organized sequentially in time.
    /// Similar to a `sequence`.
    public enum Angle { }
}

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    public enum Attributes: String, XMLParsableAttributesKey {
        /// Angle name.
        case name
        
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        case angleID
    }
    
    // Children are story elements, similar to contents of a `sequence`
}

extension FinalCutPro.FCPXML {
    static func mcAngles(in element: XMLElement) -> [XMLElement] {
        element.childElements
            .filter(\.isMCAngle)
    }
    
    static func audioVideoMCAnglesXMLFor(
        in element: XMLElement,
        multicamSources sources: [XMLElement]
    ) -> (audio: XMLElement?, video: XMLElement?) {
        let (audioAngleID, videoAngleID) = sources.audioVideoAngleIDs()
        
        let audioAngle = mcAngles(in: element, forAngleID: audioAngleID)
        let videoAngle = mcAngles(in: element, forAngleID: videoAngleID)
        
        return (audio: audioAngle, video: videoAngle)
    }
    
    static func mcAngles(
        in element: XMLElement,
        forAngleID angleID: String?
    ) -> XMLElement? {
        guard let angleID = angleID else { return nil }
        return mcAngles(in: element)
            .first(where: { $0.angleID == angleID })
    }
}

extension XMLElement {
    fileprivate var isMCAngle: Bool {
        name == FinalCutPro.FCPXML.Media.Multicam.Children.mcAngle.rawValue
    }
    
    fileprivate var angleID: String? {
        stringValue(
            forAttributeNamed: FinalCutPro.FCPXML.Media.Multicam.Angle.Attributes.angleID.rawValue
        )
    }
}

#endif
