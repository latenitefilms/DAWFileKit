//
//  FCPXML Media Multicam.swift
//  DAWFileKit • https://github.com/orchetect/DAWFileKit
//  © 2022 Steffan Andrews • Licensed under MIT License
//

#if os(macOS) // XMLNode only works on macOS

import Foundation

extension FinalCutPro.FCPXML.Media {
    /// A multi-camera element contains one or more `mc-angle` elements that each manage a series of
    /// other story elements.
    public enum Multicam { }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    public enum Attributes: String, XMLParsableAttributesKey {
        /// Multicam format.
        case format
        
        /// Multicam local timeline start.
        case tcStart
        
        /// Multicam local timeline timecode format.
        case tcFormat
    }
    
    public enum Children: String {
        case mcAngle = "mc-angle"
    }
}

extension FinalCutPro.FCPXML.Media.Multicam {
    /// A container of story elements organized sequentially in time.
    /// Similar to a `sequence`.
    public enum Angle { }
}

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    public enum Attributes: String, XMLParsableAttributesKey {
        /// Angle name.
        case name
        
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        case angleID
    }
    
    // Children are story elements, similar to contents of a `sequence`
}

extension XMLElement { // Multicam
    /// Returns child `mc-angle` elements.
    /// Call on a `multicam` element.
    public var fcpMCAngles: LazyFilterSequence<
        LazyMapSequence<
            LazyFilterSequence<LazyMapSequence<LazySequence<[XMLNode]>.Elements, XMLElement?>>, XMLElement
        >.Elements
    > {
        childElements
            .filter(\.fcpIsMCAngle)
    }
    
    /// Returns audio and video `mc-angle` elements for the given `mc-source` collection.
    /// Call on a `multicam` element.
    public func fcpAudioVideoMCAnglesFor(
        multicamSources sources: [XMLElement]
    ) -> (audioMCAngle: XMLElement?, videoMCAngle: XMLElement?) {
        let (audioAngleID, videoAngleID) = sources.fcpAudioVideoAngleIDs()
        
        let audioMCAngle = fcpMCAngle(forAngleID: audioAngleID)
        let videoMCAngle = fcpMCAngle(forAngleID: videoAngleID)
        
        return (audioMCAngle: audioMCAngle, videoMCAngle: videoMCAngle)
    }
    
    /// Returns the child `mc-angle` with the given angle identifier.
    /// Call on a `multicam` element.
    public func fcpMCAngle(
        forAngleID angleID: String?
    ) -> XMLElement? {
        guard let angleID = angleID else { return nil }
        return fcpMCAngles
            .first(whereAttribute: FinalCutPro.FCPXML.Media.Multicam.Children.mcAngle.rawValue, 
                   hasValue: angleID)
    }
    
    /// Returns `true` if element is an `mc-angle`.
    public var fcpIsMCAngle: Bool {
        name == FinalCutPro.FCPXML.Media.Multicam.Children.mcAngle.rawValue
    }
}

#endif
