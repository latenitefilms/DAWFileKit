//
//  FCPXML MCClip MulticamSource.swift
//  DAWFileKit • https://github.com/orchetect/DAWFileKit
//  © 2022 Steffan Andrews • Licensed under MIT License
//

#if os(macOS) // XMLNode only works on macOS

import Foundation
import OTCore

extension FinalCutPro.FCPXML {
    /// Multicam source used in a `mc-clip`.
    /// A single source may be used for both video and audio, or separate sources may be used for each.
    public struct MulticamSource: Equatable, Hashable {
        public let element: XMLElement
        
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        public var angleID: String? {
            get { element.fcpAngleID }
            set { element.fcpAngleID = newValue }
        }
        
        /// Indicates which source to use, if any, from the angle.
        ///
        /// When a `mc-clip` has the same angle selected for both video and audio, a single
        /// `mc-source` child element is used with a `srcEnable` attribute value of `all`.
        /// When a `mc-clip` has different angles selected for video and audio, then two
        /// `mc-source` child elements are used where one will have a `srcEnable` attribute value of
        /// `video` and the other `audio`.
        public var sourceEnable: SourceEnable? {
            get { element.fcpSourceEnable }
            set { element.fcpSourceEnable = newValue }
        }
        
        public init(element: XMLElement) {
            self.element = element
        }
    }
}

extension FinalCutPro.FCPXML.MulticamSource {
    public enum Attributes: String, XMLParsableAttributesKey {
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        case angleID
        
        /// Indicates which source to use, if any, from the angle.
        ///
        /// When a `mc-clip` has the same angle selected for both video and audio, a single
        /// `mc-source` child element is used with a `srcEnable` attribute value of `all`.
        /// When a `mc-clip` has different angles selected for video and audio, then two
        /// `mc-source` child elements are used where one will have a `srcEnable` attribute value of
        /// `video` and the other `audio`.
        case srcEnable
    }
}

extension XMLElement { // MCClip
    /// Returns child `mc-source` elements.
    /// Use on `multicam` elements.
    public var fcpMulticamSources: LazyFilteredCompactMapSequence<[XMLNode], XMLElement> {
        childElements
            .filter { $0.name == FinalCutPro.FCPXML.MCClip.Children.mcSource.rawValue }
    }
}

// MARK: - Attribute Types

extension FinalCutPro.FCPXML.MulticamSource {
    /// Multicam angle source enable value.
    ///
    /// When a `mc-clip` has the same angle selected for both video and audio, a single
    /// `mc-source` child element is used with a `srcEnable` attribute value of `all`.
    /// When a `mc-clip` has different angles selected for video and audio, then two
    /// `mc-source` child elements are used where one will have a `srcEnable` attribute value of
    /// `video` and the other `audio`.
    public enum SourceEnable: String, Equatable, Hashable, CaseIterable {
        /// Audio and Video.
        case all
        
        /// Audio source.
        case audio
        
        /// Video source.
        case video
        
        /// No sources.
        case none
    }
}

extension [XMLElement] { // [Multicam Source]
    /// Returns the corresponding angle IDs for the given multicam source(s).
    /// Call on a `mc-source` element.
    public func fcpAudioVideoAngleIDs() -> (audioID: String?, videoID: String?) {
        var audioAngleID: String?
        var videoAngleID: String?
        
        for element in self {
            guard let sourceEnable = element.fcpSourceEnable else { continue }
            switch sourceEnable {
            case .all:
                audioAngleID = element.fcpAngleID
                videoAngleID = element.fcpAngleID
            case .audio:
                audioAngleID = element.fcpAngleID
            case .video:
                videoAngleID = element.fcpAngleID
            case .none:
                break
            }
        }
        
        return (audioID: audioAngleID, videoID: videoAngleID)
    }
}

extension XMLElement { // Multicam Source
    /// Returns value for attribute `angleID`.
    /// Call on a `mc-angle` or `mc-source` element.
    public var fcpAngleID: String? {
        get { stringValue(forAttributeNamed: "angleID") }
        set { addAttribute(withName: "angleID", value: newValue) }
    }
    
    /// Returns value for attribute `srcEnable`.
    /// Call on a `mc-source` element.
    public var fcpSourceEnable: FinalCutPro.FCPXML.MulticamSource.SourceEnable? {
        get {
            guard let value = stringValue(forAttributeNamed: "srcEnable")
            else { return nil }
            
            return FinalCutPro.FCPXML.MulticamSource.SourceEnable(rawValue: value)
        }
        set {
            addAttribute(withName: "srcEnable", value: newValue?.rawValue)
        }
    }
}

#endif
